// 飞机座位分配概率 project main.go
/*
有 n 位乘客即将登机，飞机正好有 n 个座位。第一位乘客的票丢了，他随便选了一个座位坐下。
剩下的乘客将会：
如果他们自己的座位还空着，就坐到自己的座位上，
当他们自己的座位被占用时，随机选择其他座位
第 n 位乘客坐在自己的座位上的概率是多少？

示例 1：
输入：n = 1
输出：1.00000
解释：第一个人只会坐在自己的位置上。

示例 2：
输入: n = 2
输出: 0.50000
解释：在第一个人选好座位坐下后，第二个人坐在自己的座位上的概率是 0.5。

提示：
1 <= n <= 10^5

*/
package main

import (
	"fmt"
)

func main() {
	n := 4
	fmt.Println(nthPersonGetsNthSeat(n))
}

/*
执行用时 :0 ms, 在所有 Go 提交中击败了100.00%的用户
内存消耗 :1.9 MB, 在所有 Go 提交中击败了57.14%的用户

归纳法
*/
func nthPersonGetsNthSeat1(n int) float64 {
	var res float64 = 0.5
	if n == 1 {
		res = 1
	}
	return res
}

/*
执行用时 :8 ms, 在所有 Go 提交中击败了100.00%的用户
内存消耗 :2 MB, 在所有 Go 提交中击败了9.52%的用户

动态规划
第一个人不知道自己的票, 那可以拆解成三种情况:
1 刚好坐到自己的位置 1/n的机率
2 刚好坐到第n个人的位置 1/n的机率
3 坐到除了自己和第n个人的位置 n-2/n的机率
那么第n个人坐到自己位置的机率就等于
1 百分百坐到自己位置 1/n * 1
2 百分百坐不到自己位置 1/n * 0
3 因为有一个人坐不到自己的位置就会乱坐, 所以n坐到自己位置的概率等于在一个人乱坐的n-1个座位中坐到自己的位置 f(n-1)
那么当一个人乱坐时:
1 坐到n的位置 1/(n-1) * 0
2 坐到坐自己位置的人的位置上 1/(n-1) * 1
3 坐到另一个人的位置 ==> 变成了n在一个人乱坐的n-2个座位中坐到自己位置 f(n-2)
(n-3)/(n-1) * f(n-2)
会发现两种逻辑公式都是一样:
s(n) = 1/n + (n-2)/n * s(n-1)

*/
func nthPersonGetsNthSeat(n int) float64 {
	res := 1.0
	if n < 2 {
		return res
	}
	for i := 2; i < n+1; i++ {
		res = 1/float64(i) + (float64(i)-2.0)/float64(i)*res
	}
	return res
}
